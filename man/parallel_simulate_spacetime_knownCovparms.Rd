% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parallel.R
\name{parallel_simulate_spacetime_knownCovparms}
\alias{parallel_simulate_spacetime_knownCovparms}
\title{Simulation on spacetime cases}
\usage{
parallel_simulate_spacetime_knownCovparms(
  cand.m,
  nsim,
  n,
  d,
  t.len,
  covmodel = cov_spacetime_expo,
  covparms = c(1, 0.75, 50, 25),
  method.locs = "all.random",
  method.modify = NULL,
  pivot = FALSE,
  tol = .Machine$double.eps,
  ncores = NULL
)
}
\arguments{
\item{cand.m}{A numeric vector of candidates of the size of conditioning sets (m)}

\item{nsim}{A number of repeated simualtions for each case}

\item{n}{A number of locations}

\item{d}{A dimension of domain}

\item{t.len}{A number of repeated measurement (= a number of different temporal locations)}

\item{covmodel}{A covariance function}

\item{covparms}{A numeric vector of covariance parameters}

\item{method.locs}{"all.random", "space.random.time.grid", "all.grid", or "satellite"}

\item{method.modify}{An argument specifying a correction method for the cholesky factorization of a covariance matrix. At \code{NULL} by default.
If correction is \code{NULL}, then the built-in R function \code{chol} is used.
If correction is \code{"qr"}, then the built-in R function \code{qr} is used.
If correction is \code{"diag"}, then \code{C + diag(tol, n)} is used instead of a covariance matrix \code{C}.
Correction methods \code{"type-I"}, \code{"type-II"}, \code{"eigen-I"}, \code{"eigen-II"}, \code{"GMW81"}, and \code{"SE99"} are refered to Fang and O'leary (2008).
Correction method \code{"nearPD"} use a built-in function nearPD() in the R package Matrix.}

\item{pivot}{Logical indicating if pivoting is to be used when factorizing a covariance matrix. At \code{FALSE} by default}

\item{tol}{Numerical tolerance. At \code{.Machine$double.eps} by default}

\item{ncores}{A number of cores for parallel computing}
}
\value{
list
}
\description{
Simulation on spacetime cases
}
\examples{
\dontrun{
out <- parallel_simulate_spacetime_knownCovparms(cand.m = c(10, 20), 
                                                 nsim = 2, n = 10^2, 
                                                 d = 2, t.len = 3, 
                                                 covmodel = cov_spacetime_expo, 
                                                 covparms = c(1, 0.75, 50, 25), 
                                                 method.locs = "all.random")
out$kldiv
}
}
