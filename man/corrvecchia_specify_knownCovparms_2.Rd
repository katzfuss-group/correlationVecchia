% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vecchia.R
\name{corrvecchia_specify_knownCovparms_2}
\alias{corrvecchia_specify_knownCovparms_2}
\title{specify Euclidean/Correlation-based Vecchia approximation with known parameters}
\usage{
corrvecchia_specify_knownCovparms_2(
  locs,
  m,
  ordering = "maxmin",
  ordering.method = "correlation",
  coordinate = NULL,
  corr.dist = "1-rho",
  initial.pt = NULL,
  conditioning = "NN",
  conditioning.method = "correlation",
  covmodel,
  covparms
)
}
\arguments{
\item{locs}{A matrix of locations}

\item{m}{Number of nearby points to condition on}

\item{ordering}{'maxmin' or 'coord'}

\item{ordering.method}{either 'euclidean' or 'correlation'}

\item{coordinate}{integer or vector of integers in \code{1,...,d}. This argument is used only when ordering is coord}

\item{corr.dist}{1-rho, 1-abs(rho), 1-rho^2, sqrt(1-rho), sqrt(1-abs(rho)), or sqrt(1-rho^2)}

\item{initial.pt}{NULL = which.min(rowMeans(d)), center = euclidean-based center, integer = specify the first obs, 'random' = at random, and else = which.min(rowMeans(d))}

\item{conditioning}{'NN' (nearest neighbor)}

\item{conditioning.method}{either 'euclidean' or 'correlation'}

\item{covmodel}{covariance function (or matrix)}

\item{covparms}{covariance parameters as a vector. The first entry must be its overall variance}
}
\value{
An object that specifies the vecchia approximation for later use in likelihood evaluation or prediction.
}
\description{
specify Euclidean/Correlation-based Vecchia approximation with known parameters
}
\examples{
### What you should know ...

locs <- matrix(runif(400), 200, 2) ; m <- 10

rho <- correlationVecchia:::.correlation(locs = locs, covmodel = cov_expo_iso, 
                                         covparms = c(1, 0.1), abs.corr = FALSE)

ord <- GPvecchia::order_maxmin_exact(locs)
all.equal(ord, 
          order_maxmin_correlation_straightforward(locs = locs, 
                                                   d = 1 - rho, 
                                                   initial.pt = ord[1]))
all.equal(ord, 
          order_maxmin_correlation_inverseDist(locs = locs, 
                                               d = rho, 
                                               initial.pt = ord[1]))

locsord <- locs[ord, , drop = FALSE] ; rhoord <- rho[ord, ord]
all.equal(GpGp::find_ordered_nn_brute(locs = locsord, m = m), 
          conditioning_nn(m = m, d = 1 - rhoord))
all.equal(GpGp::find_ordered_nn(locs = locsord, m = m), 
          conditioning_nn(m = m, d = 1 - rhoord))

### Example

n             <- 15^2
m             <- 15
locs          <- matrix(runif(n * 2, 0, 1), n, 2)
covparms      <- c(1, 0.1, 10)

# true cov matrix
Sigma <- cov_expo_aniso(locs, covparms)

# Visualize the process
y <- as.numeric(t(chol(Sigma)) \%*\% rnorm(n))
fields::quilt.plot(locs[,1], locs[,2], y)

out01 <- corrvecchia_specify_knownCovparms_2(locs = locs, m = m,
                                             ordering = "maxmin", ordering.method = "euclidean",
                                             coordinate = NULL, corr.dist = "1-rho", 
                                             initial.pt = NULL,
                                             conditioning = "NN", 
                                             conditioning.method = "euclidean",
                                             covmodel = cov_expo_aniso, covparms = covparms)
out02 <- corrvecchia_specify_knownCovparms_2(locs = locs, m = m, ordering = "maxmin",
                                             ordering.method = "euclidean",
                                             coordinate = NULL, corr.dist = "1-rho", 
                                             initial.pt = NULL,
                                             conditioning = "NN", 
                                             conditioning.method = "correlation",
                                             covmodel = cov_expo_aniso, covparms = covparms)
out03 <- corrvecchia_specify_knownCovparms_2(locs = locs, m = m, ordering = "maxmin",
                                             ordering.method = "correlation",
                                             coordinate = NULL, corr.dist = "1-rho", 
                                             initial.pt = NULL,
                                             conditioning = "NN", 
                                             conditioning.method = "euclidean",
                                             covmodel = cov_expo_aniso, covparms = covparms)
out04 <- corrvecchia_specify_knownCovparms_2(locs = locs, m = m,
                                             ordering = "maxmin", ordering.method = "correlation",
                                             coordinate = NULL, corr.dist = "1-rho", 
                                             initial.pt = NULL,
                                             conditioning = "NN", 
                                             conditioning.method = "correlation",
                                             covmodel = cov_expo_aniso, covparms = covparms)
out05 <- corrvecchia_specify_knownCovparms_2(locs = locs, m = m,
                                             ordering = "coord", ordering.method = "euclidean",
                                             coordinate = NULL, corr.dist = "1-rho", 
                                             initial.pt = NULL,
                                             conditioning = "NN", 
                                             conditioning.method = "euclidean",
                                             covmodel = cov_expo_aniso, covparms = covparms)
out06 <- corrvecchia_specify_knownCovparms_2(locs = locs, m = m,
                                             ordering = "coord", ordering.method = "euclidean",
                                             coordinate = c(1), corr.dist = "1-rho", 
                                             initial.pt = NULL,
                                             conditioning = "NN", 
                                             conditioning.method = "euclidean",
                                             covmodel = cov_expo_aniso, covparms = covparms)
out07 <- corrvecchia_specify_knownCovparms_2(locs = locs, m = m,
                                             ordering = "coord", ordering.method = "euclidean",
                                             coordinate = c(2), corr.dist = "1-rho", 
                                             initial.pt = NULL,
                                             conditioning = "NN", 
                                             conditioning.method = "euclidean",
                                             covmodel = cov_expo_aniso, covparms = covparms)

kls.euc.euc    <- performance(out = out01, locs = locs,
                               covmodel = cov_expo_aniso, covparms = covparms)
kls.cor.euc    <- performance(out = out02, locs = locs,
                               covmodel = cov_expo_aniso, covparms = covparms)
kls.euc.cor    <- performance(out = out03, locs = locs,
                               covmodel = cov_expo_aniso, covparms = covparms)
kls.cor.cor    <- performance(out = out04, locs = locs,
                               covmodel = cov_expo_aniso, covparms = covparms)
kls.coord.xy   <- performance(out = out05, locs = locs,
                               covmodel = cov_expo_aniso, covparms = covparms)
kls.coord.x    <- performance(out = out06, locs = locs,
                               covmodel = cov_expo_aniso, covparms = covparms)
kls.coord.y    <- performance(out = out07, locs = locs,
                               covmodel = cov_expo_aniso, covparms = covparms)

c(kls.euc.euc, kls.euc.cor, kls.cor.euc, kls.cor.cor, kls.coord.xy, kls.coord.x, kls.coord.y)
}
