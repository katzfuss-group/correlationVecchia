% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parallel.R
\name{parSim_deriv_knownCovparms}
\alias{parSim_deriv_knownCovparms}
\title{Simulation on derivative cases}
\usage{
parSim_deriv_knownCovparms(
  cand.m,
  cand.r,
  nsim,
  n,
  d,
  covmodel = cov_sqexpo_deriv,
  covtype = "sqexpo",
  covparms = c(1),
  abs.corr = FALSE,
  method.locs = "random",
  method.modify = NULL,
  pivot = FALSE,
  tol = .Machine$double.eps,
  ncores = NULL
)
}
\arguments{
\item{cand.m}{A numeric vector of candidates of the size of conditioning sets (m)}

\item{cand.r}{A numeric vector of candidates of range parameter (r)}

\item{nsim}{A number of repeated simualtions for each case}

\item{n}{A number of locations}

\item{d}{A dimension of domain. It must be 2 for now}

\item{covmodel}{A covariance function}

\item{covtype}{sqexpo or matern}

\item{covparms}{A numeric vector of covariance parameters}

\item{abs.corr}{Logical. If \code{TRUE} then distance = 1-|cor|. If \code{FALSE} then distane = 1-cor. At \code{FALSE} by default}

\item{method.locs}{random or grid}

\item{method.modify}{An argument specifying a correction method for the cholesky factorization of a covariance matrix. At \code{NULL} by default.
If correction is \code{NULL}, then the built-in R function \code{chol} is used.
If correction is \code{"qr"}, then the built-in R function \code{qr} is used.
If correction is \code{"diag"}, then \code{C + diag(tol, n)} is used instead of a covariance matrix \code{C}.
Correction methods \code{"type-I"}, \code{"type-II"}, \code{"eigen-I"}, \code{"eigen-II"}, \code{"GMW81"}, and \code{"SE99"} are refered to Fang and O'leary (2008).
Correction method \code{"nearPD"} use a built-in function nearPD() in the R package Matrix.}

\item{pivot}{Logical indicating if pivoting is to be used when factorizing a covariance matrix. At \code{FALSE} by default}

\item{tol}{Numerical tolerance. At \code{.Machine$double.eps} by default}

\item{ncores}{A number of cores for parallel computing}
}
\value{
list
}
\description{
Simulation on derivative cases
}
\examples{
\dontrun{
  out <- parSim_deriv_knownCovparms(cand.m = c(10, 20), cand.r = c(0.1, 10),
                                    nsim = 2, n = 10^2, d = 2,
                                    covmodel = cov_sqexpo_deriv, covparms = c(1),
                                    abs.corr = FALSE, method.locs = 'random',
                                    method.modify = "eigen-I", pivot = FALSE,
                                    tol = 1e-6, ncores = NULL)
  out$kldiv
}
}
