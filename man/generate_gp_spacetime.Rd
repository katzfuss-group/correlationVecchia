% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generation.R
\name{generate_gp_spacetime}
\alias{generate_gp_spacetime}
\title{Generating realizations of spatio-temporal mean-zero Gaussian Process (GP) using a user-defined covariance function}
\usage{
generate_gp_spacetime(
  nsim,
  n,
  d,
  t.len,
  method.locs,
  covmodel,
  method.modify = NULL,
  pivot = FALSE,
  tol = .Machine$double.eps,
  verbose = TRUE,
  ...
)
}
\arguments{
\item{nsim}{A number of realizations of the GP}

\item{n}{A number of different spatial locations}

\item{d}{A dimension of space domain}

\item{t.len}{A number of repeated measurement (= a number of different temporal locations)}

\item{method.locs}{all.random, space.random.time.grid, all.grid, or satellite}

\item{covmodel}{A covariance function}

\item{method.modify}{An argument specifying a correction method for the cholesky factorization of a covariance matrix. At \code{NULL} by default.
If correction is \code{NULL}, then the built-in R function \code{chol} is used.
If correction is \code{"qr"}, then the built-in R function \code{qr} is used.
If correction is \code{"diag"}, then \code{C + diag(tol, n)} is used instead of a covariance matrix \code{C}.
Correction methods \code{"type-I"}, \code{"type-II"}, \code{"eigen-I"}, \code{"eigen-II"}, \code{"GMW81"}, and \code{"SE99"} are refered to Fang and O'leary (2008).
Correction method \code{"nearPD"} use a built-in function nearPD() in the R package Matrix.}

\item{pivot}{Logical indicating if pivoting is to be used when factorizing a covariance matrix.  At \code{FALSE} by default}

\item{tol}{Numerical tolerance. At \code{.Machine$double.eps} by default}

\item{verbose}{Logical at \code{TRUE} by default. If verbose is \code{TRUE}, then this function prints out all messages}

\item{...}{Covariance parameters}
}
\value{
\code{generate_gp_spacetime} returns
\itemize{
\item{\code{nsim}: } A number of realizations of the GP
\item{\code{size}: } A size of realizations of the GP
\item{\code{n}: } An actual number of spatial locations
\item{\code{d}: } A dimension of space domain
\item{\code{t.len}: } A number of repeated measurement (= a number of different temporal locations)
\item{\code{method.locs}: } The argument method.locs
\item{\code{method.modify}: } The argument method.modify
\item{\code{pivot}: } The argument pivot
\item{\code{tol}: } The argument tol
\item{\code{sim}: } Simulation results
}
}
\description{
Generating realizations of spatio-temporal mean-zero Gaussian Process (GP) using a user-defined covariance function
}
\examples{
par(mfrow = c(4, 2))

out <- generate_gp_spacetime(nsim = 2, n = 300, d = 2, t.len = 3, 
                             method.locs = "all.random", 
                             covmodel = cov_expo_spacetime_nonsep, 
                             covparms = c(1, 0.75, 50, 25))
plot(as.data.frame(out$sim$sim1$locs[, 1:2]), main = "Spatial locations")
plot(out$sim$sim1$locs[, 3], main = "Measurement time against index")

out <- generate_gp_spacetime(nsim = 2, n = 300, d = 2, t.len = 3, 
                             method.locs = "space.random.time.grid", 
                             covmodel = cov_expo_spacetime_nonsep, 
                             covparms = c(1, 0.75, 50, 25))
plot(as.data.frame(out$sim$sim1$locs[, 1:2]), main = "Spatial locations")
plot(out$sim$sim1$locs[, 3], main = "Measurement time against index")

out <- generate_gp_spacetime(nsim = 2, n = 300, d = 2, t.len = 3, 
                             method.locs = "all.grid", 
                             covmodel = cov_expo_spacetime_nonsep, 
                             covparms = c(1, 0.75, 50, 25))
plot(as.data.frame(out$sim$sim1$locs[, 1:2]), main = "Spatial locations")
plot(out$sim$sim1$locs[, 3], main = "Measurement time against index")

out <- generate_gp_spacetime(nsim = 2, n = 300, d = 2, t.len = 3, 
                             method.locs = "satellite", 
                             covmodel = cov_expo_spacetime_nonsep, 
                             covparms = c(1, 0.75, 50, 25))
plot(as.data.frame(out$sim$sim1$locs[, 1:2]), main = "Spatial locations")
plot(out$sim$sim1$locs[, 3], main = "Measurement time against index")

par(mfrow = c(1, 1))
}
