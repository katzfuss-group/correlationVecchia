% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulation.R
\name{simulate_mulv}
\alias{simulate_mulv}
\title{Conducting simulation on vecchia approximations for multivariate GPs with known covariance parameters}
\usage{
simulate_mulv(
  nsim,
  n,
  d,
  p,
  m,
  abs.corr,
  method.locs,
  method.modify = NULL,
  pivot = FALSE,
  tol = .Machine$double.eps,
  verbose = TRUE,
  covmodel,
  ...
)
}
\arguments{
\item{nsim}{A number of realizations of the GP}

\item{n}{A number of locations}

\item{d}{A dimension of domain}

\item{p}{A number of GPs}

\item{m}{A size of conditioning sets}

\item{abs.corr}{Logical. If \code{TRUE} then distance = 1-|cor|. If \code{FALSE} then distane = 1-cor. At \code{FALSE} by default}

\item{method.locs}{"random", "overlap", or "grid"}

\item{method.modify}{An argument specifying a correction method for the cholesky factorization of a covariance matrix. At \code{NULL} by default.
If correction is \code{NULL}, then the built-in R function \code{chol} is used.
If correction is \code{"qr"}, then the built-in R function \code{qr} is used.
If correction is \code{"diag"}, then \code{C + diag(tol, n)} is used instead of a covariance matrix \code{C}.
Correction methods \code{"type-I"}, \code{"type-II"}, \code{"eigen-I"}, \code{"eigen-II"}, \code{"GMW81"}, and \code{"SE99"} are refered to Fang and O'leary (2008).
Correction method \code{"nearPD"} use a built-in function nearPD() in the R package Matrix.}

\item{pivot}{Logical indicating if pivoting is to be used when factorizing a covariance matrix. At \code{FALSE} by default}

\item{tol}{Numerical tolerance. At \code{.Machine$double.eps} by default}

\item{verbose}{Logical at \code{TRUE} by default. If verbose is \code{TRUE}, then this function prints out all messages}

\item{covmodel}{Covariance function}

\item{...}{Covariance parameters}
}
\value{
Simulation result (list)
}
\description{
Conducting simulation on vecchia approximations for multivariate GPs with known covariance parameters
}
\examples{
\dontrun{
output <- simulate_mulv(nsim = 2, n = 20^2, d = 2, p = 2, m = 20,
                        method.locs = 'random',
                        method.modify = NULL, abs.corr = FALSE,
                        pivot = FALSE, tol = .Machine$double.eps,
                        verbose = TRUE,
                        covmodel = cov_latentDim_biv,
                        covparms = c(1, 0.1, 0.1))

barplot(log10(output$kls.average), names.arg = output$names, 
        main = "log10-scale KL divergences")
}
}
