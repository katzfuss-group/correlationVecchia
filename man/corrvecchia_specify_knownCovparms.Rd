% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vecchia.R
\name{corrvecchia_specify_knownCovparms}
\alias{corrvecchia_specify_knownCovparms}
\title{specify a general vecchia approximation with known parameters}
\usage{
corrvecchia_specify_knownCovparms(
  locs,
  m,
  ordering = "maxmin",
  ordering.method = "correlation",
  coordinate = NULL,
  abs.corr = FALSE,
  initial.pt = NULL,
  conditioning = "NN",
  conditioning.method = "correlation",
  covmodel,
  covparms
)
}
\arguments{
\item{locs}{A matrix of locations}

\item{m}{Number of nearby points to condition on}

\item{ordering}{'maxmin' or 'coord'}

\item{ordering.method}{either 'euclidean' or 'correlation'}

\item{coordinate}{integer or vector of integers in \code{1,...,d}}

\item{abs.corr}{Logical. If \code{TRUE} then distance = 1-|rho|. If \code{FALSE} then distane = 1-rho}

\item{initial.pt}{NULL = which.min(rowMeans(d)), center = euclidean-based center, integer = specify the first obs, 'random' = at random, and else = which.min(rowMeans(d))}

\item{conditioning}{'NN' (nearest neighbor)}

\item{conditioning.method}{either 'euclidean' or 'correlation'}

\item{covmodel}{covariance function (or matrix)}

\item{covparms}{covariance parameters as a vector. The first entry must be its overall variance}
}
\value{
An object that specifies the vecchia approximation for later use in likelihood evaluation or prediction.
}
\description{
specify a general vecchia approximation with known parameters
}
\examples{
n             <- 15^2
m             <- 15
locs          <- matrix(runif(n * 2, 0, 1), n, 2)
covparms      <- c(1, 0.1, 10)

# true cov matrix
Sigma <- cov_expo_aniso(locs, covparms)

# Visualize the process
y <- as.numeric(t(chol(Sigma)) \%*\% rnorm(n))
fields::quilt.plot(locs[,1], locs[,2], y)

out1 <- corrvecchia_specify_knownCovparms(locs = locs, m = m, 
                                          ordering = "maxmin", ordering.method = "euclidean", 
                                          coordinate = NULL, abs.corr = FALSE, initial.pt = NULL, 
                                          conditioning = "NN", conditioning.method = "euclidean", 
                                          covmodel = cov_expo_aniso, covparms = covparms)
out2 <- corrvecchia_specify_knownCovparms(locs = locs, m = m, ordering = "maxmin", 
                                          ordering.method = "euclidean", 
                                          coordinate = NULL, abs.corr = FALSE, initial.pt = NULL, 
                                          conditioning = "NN", conditioning.method = "correlation", 
                                          covmodel = cov_expo_aniso, covparms = covparms)
out3 <- corrvecchia_specify_knownCovparms(locs = locs, m = m, ordering = "maxmin", 
                                          ordering.method = "correlation", 
                                          coordinate = NULL, abs.corr = FALSE, initial.pt = NULL, 
                                          conditioning = "NN", conditioning.method = "euclidean", 
                                          covmodel = cov_expo_aniso, covparms = covparms)
out4 <- corrvecchia_specify_knownCovparms(locs = locs, m = m, 
                                          ordering = "maxmin", ordering.method = "correlation", 
                                          coordinate = NULL, abs.corr = FALSE, initial.pt = NULL, 
                                          conditioning = "NN", conditioning.method = "correlation", 
                                          covmodel = cov_expo_aniso, covparms = covparms)
out5 <- corrvecchia_specify_knownCovparms(locs = locs, m = m, 
                                          ordering = "coord", ordering.method = "euclidean", 
                                          coordinate = NULL, abs.corr = FALSE, initial.pt = NULL, 
                                          conditioning = "NN", conditioning.method = "euclidean", 
                                          covmodel = cov_expo_aniso, covparms = covparms)
out6 <- corrvecchia_specify_knownCovparms(locs = locs, m = m, 
                                          ordering = "coord", ordering.method = "euclidean", 
                                          coordinate = c(1), abs.corr = FALSE, initial.pt = NULL, 
                                          conditioning = "NN", conditioning.method = "euclidean", 
                                          covmodel = cov_expo_aniso, covparms = covparms)
out7 <- corrvecchia_specify_knownCovparms(locs = locs, m = m, 
                                          ordering = "coord", ordering.method = "euclidean", 
                                          coordinate = c(2), abs.corr = FALSE, initial.pt = NULL, 
                                          conditioning = "NN", conditioning.method = "euclidean", 
                                          covmodel = cov_expo_aniso, covparms = covparms)

kls.euc.euc    <- performance(out = out1, locs = locs, 
                              covmodel = cov_expo_aniso, covparms = covparms)
kls.cor.euc    <- performance(out = out2, locs = locs, 
                              covmodel = cov_expo_aniso, covparms = covparms)
kls.euc.cor    <- performance(out = out3, locs = locs, 
                              covmodel = cov_expo_aniso, covparms = covparms)
kls.cor.cor    <- performance(out = out4, locs = locs, 
                              covmodel = cov_expo_aniso, covparms = covparms)
kls.coord.xy   <- performance(out = out5, locs = locs, 
                              covmodel = cov_expo_aniso, covparms = covparms)
kls.coord.x    <- performance(out = out6, locs = locs, 
                              covmodel = cov_expo_aniso, covparms = covparms)
kls.coord.y    <- performance(out = out7, locs = locs, 
                              covmodel = cov_expo_aniso, covparms = covparms)

c(kls.euc.euc, kls.euc.cor, kls.cor.euc, kls.cor.cor, kls.coord.xy, kls.coord.x, kls.coord.y)
}
