% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vecchia.R
\name{cvecchia_m_specify}
\alias{cvecchia_m_specify}
\title{specify Euclidean/Correlation-based Vecchia approximation with known parameters}
\usage{
cvecchia_m_specify(
  locs,
  m,
  initial.pt = NULL,
  covmodel,
  covparms,
  abs.corr = FALSE,
  coordinate = NULL,
  ordering = "MM",
  ordering.method = "cor",
  conditioning = "NN",
  conditioning.method = "cor"
)
}
\arguments{
\item{locs}{A matrix of locations}

\item{m}{Number of nearby points to condition on}

\item{initial.pt}{NULL = which.min(rowMeans(d)), center = euclidean-based center, integer = specify the first obs, 'random' = at random, and else = which.min(rowMeans(d))}

\item{covmodel}{Covariance model (or matrix)}

\item{covparms}{Covariance parameters as a vector. The first entry must be its overall variance}

\item{abs.corr}{Logical. If \code{TRUE} then distance = 1-|rho|. If \code{FALSE} then distane = 1-rho}

\item{coordinate}{integer or vector of integers in \code{1,...,d}. This argument is used only when ordering is coord}

\item{ordering}{'MM' or 'coord'}

\item{ordering.method}{'euc' or 'cor'}

\item{conditioning}{'NN' (nearest neighbor)}

\item{conditioning.method}{'euc' or 'cor'}
}
\value{
An object that specifies the vecchia approximation for later use in likelihood evaluation or prediction.
}
\description{
specify Euclidean/Correlation-based Vecchia approximation with known parameters
}
\examples{
locs    <- matrix(runif(400), 200, 2)
m       <- 10
cormat  <- cov_expo_iso(locs = locs, covparms = c(1, 0.1))

ord     <- GPvecchia::order_maxmin_exact(locs)
all.equal(ord, order_maxmin_euclidean(locs = locs, initial.pt = ord[1]))
all.equal(ord, order_maxmin_correlation(locs = locs, d.inv = cormat, initial.pt = ord[1]))

locsord <- locs[ord, , drop = FALSE]
corord  <- cormat[ord, ord]

all.equal(GpGp::find_ordered_nn_brute(locs = locsord, m = m),
          conditioning_m_Rcpp(m = m, d = 1 - corord) + 1)
all.equal(GpGp::find_ordered_nn(locs = locsord, m = m),
          conditioning_m_Rcpp(m = m, d = 1 - corord) + 1)

### Example

n             <- 20^2
m             <- 20
locs          <- matrix(runif(n * 2, 0, 1), n, 2)
covparms      <- c(1, 0.1, 10)

# true cov matrix
covmat <- cov_expo_aniso(locs, covparms)

# Visualize the process
y <- as.numeric(t(chol(covmat)) \%*\% rnorm(n))
fields::quilt.plot(locs[,1], locs[,2], y)

out01 <- cvecchia_m_specify(locs = locs, m = m, initial.pt = NULL,
                            covmodel = covmat, covparms = covparms,
                            abs.corr = FALSE, coordinate = c(1),
                            ordering = "coord", ordering.method = "euc",
                            conditioning = "NN", conditioning.method = "euc")

out02 <- cvecchia_m_specify(locs = locs, m = m, initial.pt = NULL,
                            covmodel = covmat, covparms = covparms,
                            abs.corr = FALSE, coordinate = c(2),
                            ordering = "coord", ordering.method = "euc",
                            conditioning = "NN", conditioning.method = "euc")

out03 <- cvecchia_m_specify(locs = locs, m = m, initial.pt = NULL,
                            covmodel = covmat, covparms = covparms,
                            abs.corr = FALSE, coordinate = NULL,
                            ordering = "MM", ordering.method = "euc",
                            conditioning = "NN", conditioning.method = "euc")

out04 <- cvecchia_m_specify(locs = locs, m = m, initial.pt = NULL,
                            covmodel = covmat, covparms = covparms,
                            abs.corr = FALSE, coordinate = NULL,
                            ordering = "MM", ordering.method = "euc",
                            conditioning = "NN", conditioning.method = "cor")

out05 <- cvecchia_m_specify(locs = locs, m = m, initial.pt = NULL,
                            covmodel = covmat, covparms = covparms,
                            abs.corr = FALSE, coordinate = NULL,
                            ordering = "MM", ordering.method = "cor",
                            conditioning = "NN", conditioning.method = "euc")

out06 <- cvecchia_m_specify(locs = locs, m = m, initial.pt = NULL,
                            covmodel = covmat, covparms = covparms,
                            abs.corr = FALSE, coordinate = NULL,
                            ordering = "MM", ordering.method = "cor",
                            conditioning = "NN", conditioning.method = "cor")

kls.coord.x    <- performance(vecchia.approx = out01, locs = locs,
                              covmodel = cov_expo_aniso, covparms = covparms)
kls.coord.y    <- performance(vecchia.approx = out02, locs = locs,
                              covmodel = cov_expo_aniso, covparms = covparms)
kls.euc.euc    <- performance(vecchia.approx = out03, locs = locs,
                              covmodel = cov_expo_aniso, covparms = covparms)
kls.euc.cor    <- performance(vecchia.approx = out04, locs = locs,
                              covmodel = cov_expo_aniso, covparms = covparms)
kls.cor.euc    <- performance(vecchia.approx = out05, locs = locs,
                              covmodel = cov_expo_aniso, covparms = covparms)
kls.cor.cor    <- performance(vecchia.approx = out06, locs = locs,
                              covmodel = cov_expo_aniso, covparms = covparms)

barplot(log10(c(kls.coord.x, kls.coord.y, kls.euc.euc,
                kls.euc.cor, kls.cor.euc, kls.cor.cor)),
        names.arg = c("X-coord + E-NN", "Y-coord + E-NN",
                      "E-MM + E-NN", "E-MM + C-NN",
                      "C-MM + E-NN", "C-MM + C-NN"),
        main = "Vecchia Approximations", ylab = "log10-scale KL divergence")
}
