#pragma once

#include "iostream"
#include "vector"
using namespace std;

struct Data
{
	unsigned int rowSize = 2;
	unsigned int colSize = 30;

	/*
	// seed = 123
	vector<vector<double>> entries = { {0.768447675, 0.673958695, 0.313243956, 0.586022124, 0.268639569, 0.163665819, 0.865412143, 0.2856979, 0.275819115, 0.58231778, 0.705860332, 0.281065895, 0.209230168, 0.614254771, 0.555668301, 0.479999833, 0.356221085, 0.529253324, 0.900681479, 0.621378715, 0.570613189, 0.37498027, 0.1917802, 0.097669803, 0.946696535, 0.122594436, 0.514679883, 0.03347555, 0.301603402, 0.458475706}, 
		                               {0.940515001, 0.395453112, 0.662554816, 0.052133163, 0.108870741, 0.473016816, 0.617491888, 0.463847208, 0.446568065, 0.255981303, 0.291978267, 0.792931029, 0.918165131, 0.802664694, 0.94078227, 0.790200953, 0.900924596, 0.031830968, 0.940299242, 0.348172765, 0.203996623, 0.759754654, 0.234543676, 0.627092997, 0.54690429, 0.110364564, 0.628172302, 0.707863993, 0.31084741, 0.46721859} };
	*/

	// seed = 321
	vector<vector<double>> entries = { {0.630680164, 0.785343212, 0.725967403, 0.384746804, 0.066332777, 0.133667622, 0.684830531, 0.642028648, 0.708973463, 0.156014202, 0.859438927, 0.369073307, 0.030589286, 0.249472289, 0.766846143, 0.762733708, 0.020763421, 0.676813798, 0.235655257, 0.278117884, 0.596838115, 0.61879513, 0.840685027, 0.488689207, 0.030872465, 0.130888217, 0.124606567, 0.050117557, 0.138916279, 0.615490804},
									   {0.91239613, 0.313120618, 0.050610625, 0.990313355, 0.283005201, 0.029293502, 0.970113917, 0.837657897, 0.170631242, 0.038255007, 0.511757776, 0.174439784, 0.565152799, 0.355351824, 0.204757612, 0.513890368, 0.517269295, 0.791975927, 0.387010792, 0.776910901, 0.398383379, 0.516435312, 0.556239369, 0.418524799, 0.46378566, 0.681082833, 0.29392978, 0.067728284, 0.254978952, 0.337992825} };
} x;

struct Matrix
{
	signed int rowSize;
	signed int colSize;
	vector<vector<double>> entries;
};

double dist2Func(signed int i, signed int j)
{
	double out = 0.0;
	for (signed int k = 0; k < x.rowSize; k++) {
		out += pow(x.entries.at(k).at(i) - x.entries[k][j], 2.0);
	}
	return(out);
}